/*******************************************************************************
 * File:        Point3D.cpp
 * Author:      Ashish Gupta
 * Revision:    4
 ******************************************************************************/

#include <stdio.h>

#include "Point3D.h"

// *****************************************************************************
// *****************************************************************************
Point3D::Point3D(double x, double y, double z) {
    pos[0] = x;
    pos[1] = y;
    pos[2] = z;
}

// *****************************************************************************
// *****************************************************************************
Point3D::~Point3D() {

}

// *****************************************************************************
// *****************************************************************************
Point3D Point3D::operator +(const Point3D &p) {
    return Point3D(pos[0] + p.pos[0], pos[1] + p.pos[1], pos[2] + p.pos[2]);
}

// *****************************************************************************
// *****************************************************************************
Point3D Point3D::operator -(const Point3D &p) {
    return Point3D(pos[0] - p.pos[0], pos[1] - p.pos[1], pos[2] - p.pos[2]);
}

// *****************************************************************************
// *****************************************************************************
Point3D& Point3D::operator +=(const Point3D &p) {
    pos[0] += p.pos[0];
    pos[1] += p.pos[1];
    pos[2] += p.pos[2];
    return *this;
}

// *****************************************************************************
// *****************************************************************************
Point3D& Point3D::operator -=(const Point3D &p) {
    pos[0] -= p.pos[0];
    pos[1] -= p.pos[1];
    pos[2] -= p.pos[2];
    return *this;
}

// *****************************************************************************
// *****************************************************************************
Point3D& Point3D::operator =(const Point3D &p) {
    pos[0] = p.pos[0];
    pos[1] = p.pos[1];
    pos[2] = p.pos[2];
    return *this;
}

// *****************************************************************************
// *****************************************************************************
Point3D& Point3D::operator +=(const double &s) {
    pos[0] += s;
    pos[1] += s;
    pos[2] += s;
    return *this;
}

// *****************************************************************************
// *****************************************************************************
Point3D& Point3D::operator -=(const double &s) {
    pos[0] -= s;
    pos[1] -= s;
    pos[2] -= s;
    return *this;
}

// *****************************************************************************
// *****************************************************************************
Point3D& Point3D::operator *=(const double &s) {
    pos[0] *= s;
    pos[1] *= s;
    pos[2] *= s;
    return *this;
}

// *****************************************************************************
// *****************************************************************************
Point3D& Point3D::operator /=(const double &s) {
    pos[0] /= s;
    pos[1] /= s;
    pos[2] /= s;
    return *this;
}

// *****************************************************************************
// *****************************************************************************
Point3D& Point3D::operator =(const double &s) {
    pos[0] = s;
    pos[1] = s;
    pos[2] = s;
    return *this;
}

// *****************************************************************************
// *****************************************************************************
Point3D Point3D::operator +(const double &s) {
    return Point3D(pos[0] + s, pos[1] + s, pos[2] + s);
}

// *****************************************************************************
// *****************************************************************************
Point3D Point3D::operator -(const double &s) {
    return Point3D(pos[0] - s, pos[1] - s, pos[2] - s);
}

// *****************************************************************************
// *****************************************************************************
Point3D Point3D::operator *(const double &s) {
    return Point3D(pos[0] * s, pos[1] * s, pos[2] * s);
}

// *****************************************************************************
// *****************************************************************************
Point3D Point3D::operator /(const double &s) {
    return Point3D(pos[0] / s, pos[1] / s, pos[2] / s);
}

// *****************************************************************************
// *****************************************************************************
bool Point3D::operator ==(const Point3D &p) {
    return (pos[0] == p.pos[0] && pos[1] == p.pos[1] && pos[2] == p.pos[2]);
}

// *****************************************************************************
// *****************************************************************************
bool Point3D::operator !=(const Point3D &p) {
    return (pos[0] != p.pos[0] || pos[1] != p.pos[1] || pos[2] != p.pos[2]);
}

// *****************************************************************************
// *****************************************************************************
double Point3D::operator () (int i) const {
    return pos[i];
}

// *****************************************************************************
// *****************************************************************************
double & Point3D::operator () (int i) {
    return pos[i];
}

// *****************************************************************************
// *****************************************************************************
double & Point3D::operator [] (int i) {
    return pos[i];
}

// *****************************************************************************
// *****************************************************************************
void Point3D::print() {
    printf("Point3D (x,y)= (%g, %g, %g)\n", pos[0], pos[1], pos[2]);
}

// *****************************************************************************
// *****************************************************************************
Point3D operator +(const double &s, const Point3D &p) {
    return Point3D(s + p.pos[0], s + p.pos[1], s + p.pos[2]);
}

// *****************************************************************************
// *****************************************************************************
Point3D operator -(const double &s, const Point3D &p) {
    return Point3D(s - p.pos[0], s - p.pos[1], s - p.pos[2]);
}

// *****************************************************************************
// *****************************************************************************
Point3D operator *(const double &s, const Point3D &p) {
    return Point3D(s * p.pos[0], s * p.pos[1], s * p.pos[2]);
}

