/*******************************************************************************
 * File:        RMSIO.cpp
 * Author:      Ashish Gupta
 * Revision:    1
 * Package:     Multi-Phase Computational Fluid Dynamics Flow Solver
 ******************************************************************************/

#include "License.h"

// Custom header files
#include "Commons.h"
#include "Material.h"
#include "SolverParameters.h"
#include "Solver.h"
#include "Trim_Utils.h"

static FILE *RMS_FP;

//------------------------------------------------------------------------------
//! RMS Writer Initialization
//------------------------------------------------------------------------------
void RMS_Writer_Init(void) {
    RMS_FP = NULL;
    if ((RMS_FP = fopen("Residual.res", "wb")) == NULL)
        error("RMS_Writer_Init: Unable to Write RMS File - Residual.res");
    
    if (VariableType == VARIABLE_CON) {
        if (PrecondMethod == PRECOND_METHOD_NONE) {
            fprintf(RMS_FP, "=====================================================================================================================================================================================================================================================\n");
            fprintf(RMS_FP, "-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n");
            fprintf(RMS_FP, " Iter    RMS_SRHO   RMS_SRHOU   RMS_SRHOV   RMS_SRHOW      RMS_SE    RMS_SRES     RMS_RHO    RMS_RHOU    RMS_RHOV    RMS_RHOW       RMS_E     RMS_RES    MIN_TIME    MAX_TIME  MIN_LAMDA1  MAX_LAMDA1  MIN_LAMDA4  MAX_LAMDA4  MIN_LAMDA5  MAX_LAMDA5\n");
            fprintf(RMS_FP, "-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n");
        } else {
            fprintf(RMS_FP, "=============================================================================================================================================================================================================================================================================\n");
            fprintf(RMS_FP, "-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n");
            fprintf(RMS_FP, " Iter    RMS_SRHO   RMS_SRHOU   RMS_SRHOV   RMS_SRHOW      RMS_SE    RMS_SRES     RMS_RHO    RMS_RHOU    RMS_RHOV    RMS_RHOW       RMS_E     RMS_RES    MIN_TIME    MAX_TIME  MIN_LAMDA1  MAX_LAMDA1  MIN_LAMDA4  MAX_LAMDA4  MIN_LAMDA5  MAX_LAMDA5   MIN_SIGMA   MAX_SIGMA\n");
            fprintf(RMS_FP, "-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n");
        }
    } else if (VariableType == VARIABLE_RUP) {
        if (PrecondMethod == PRECOND_METHOD_NONE) {
            fprintf(RMS_FP, "=====================================================================================================================================================================================================================================================\n");
            fprintf(RMS_FP, "-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n");
            fprintf(RMS_FP, " Iter    RMS_SRHO      RMS_SU      RMS_SV      RMS_SW      RMS_SP    RMS_SRES     RMS_RHO       RMS_U       RMS_V       RMS_W       RMS_P     RMS_RES    MIN_TIME    MAX_TIME  MIN_LAMDA1  MAX_LAMDA1  MIN_LAMDA4  MAX_LAMDA4  MIN_LAMDA5  MAX_LAMDA5\n");
            fprintf(RMS_FP, "-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n");
        } else {
            fprintf(RMS_FP, "=============================================================================================================================================================================================================================================================================\n");
            fprintf(RMS_FP, "-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n");
            fprintf(RMS_FP, " Iter    RMS_SRHO      RMS_SU      RMS_SV      RMS_SW      RMS_SP    RMS_SRES     RMS_RHO       RMS_U       RMS_V       RMS_W       RMS_P     RMS_RES    MIN_TIME    MAX_TIME  MIN_LAMDA1  MAX_LAMDA1  MIN_LAMDA4  MAX_LAMDA4  MIN_LAMDA5  MAX_LAMDA5   MIN_SIGMA   MAX_SIGMA\n");
            fprintf(RMS_FP, "-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n");
        }
    } else if (VariableType == VARIABLE_PUT) {
        if (PrecondMethod == PRECOND_METHOD_NONE) {
            fprintf(RMS_FP, "=====================================================================================================================================================================================================================================================\n");
            fprintf(RMS_FP, "-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n");
            fprintf(RMS_FP, " Iter      RMS_SP      RMS_SU      RMS_SV      RMS_SW      RMS_ST    RMS_SRES       RMS_P       RMS_U       RMS_V       RMS_W       RMS_T     RMS_RES    MIN_TIME    MAX_TIME  MIN_LAMDA1  MAX_LAMDA1  MIN_LAMDA4  MAX_LAMDA4  MIN_LAMDA5  MAX_LAMDA5\n");
            fprintf(RMS_FP, "-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n");
        } else {
            fprintf(RMS_FP, "=============================================================================================================================================================================================================================================================================\n");
            fprintf(RMS_FP, "-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n");
            fprintf(RMS_FP, " Iter      RMS_SP      RMS_SU      RMS_SV      RMS_SW      RMS_ST    RMS_SRES       RMS_P       RMS_U       RMS_V       RMS_W       RMS_T     RMS_RES    MIN_TIME    MAX_TIME  MIN_LAMDA1  MAX_LAMDA1  MIN_LAMDA4  MAX_LAMDA4  MIN_LAMDA5  MAX_LAMDA5   MIN_SIGMA   MAX_SIGMA\n");
            fprintf(RMS_FP, "-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n");
        }
    } else if (VariableType == VARIABLE_RUT) {
        if (PrecondMethod == PRECOND_METHOD_NONE) {
            fprintf(RMS_FP, "=====================================================================================================================================================================================================================================================\n");
            fprintf(RMS_FP, "-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n");
            fprintf(RMS_FP, " Iter    RMS_SRHO      RMS_SU      RMS_SV      RMS_SW      RMS_ST    RMS_SRES     RMS_RHO       RMS_U       RMS_V       RMS_W       RMS_T     RMS_RES    MIN_TIME    MAX_TIME  MIN_LAMDA1  MAX_LAMDA1  MIN_LAMDA4  MAX_LAMDA4  MIN_LAMDA5  MAX_LAMDA5\n");
            fprintf(RMS_FP, "-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n");
        } else {
            fprintf(RMS_FP, "=============================================================================================================================================================================================================================================================================\n");
            fprintf(RMS_FP, "-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n");
            fprintf(RMS_FP, " Iter    RMS_SRHO      RMS_SU      RMS_SV      RMS_SW      RMS_ST    RMS_SRES     RMS_RHO       RMS_U       RMS_V       RMS_W       RMS_T     RMS_RES    MIN_TIME    MAX_TIME  MIN_LAMDA1  MAX_LAMDA1  MIN_LAMDA4  MAX_LAMDA4  MIN_LAMDA5  MAX_LAMDA5   MIN_SIGMA   MAX_SIGMA\n");
            fprintf(RMS_FP, "-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n");
        }
    }
    fflush(RMS_FP);
}

//------------------------------------------------------------------------------
//! RMS Writer Finalize
//------------------------------------------------------------------------------
void RMS_Writer_Finalize(void) {
    if (PrecondMethod == PRECOND_METHOD_NONE)
        fprintf(RMS_FP, "=====================================================================================================================================================================================================================================================\n");
    else
        fprintf(RMS_FP, "=============================================================================================================================================================================================================================================================================\n");
    
    fflush(RMS_FP);
    
    if (RMS_FP != NULL)
        fclose(RMS_FP);
    RMS_FP = NULL;
}

//------------------------------------------------------------------------------
//! RMS Writer
//------------------------------------------------------------------------------
double RMS_Writer(int Iteration) {
    static int SaveRMS = 0;
    static double scale_RMS[NEQUATIONS] = {0.0, 0.0, 0.0, 0.0, 0.0};
    static double scale_RMS_Res = 0.0;
    double RMS[NEQUATIONS];
    double RMS_S[NEQUATIONS];
    double RMS_Res, RMS_Res_S;
    
    // Compute RMS
    RMS[0]   = RMS[1]   = RMS[2]   = RMS[3]   = RMS[4]   = 0.0;
    RMS_S[0] = RMS_S[1] = RMS_S[2] = RMS_S[3] = RMS_S[4] = 0.0;
    for (int i = 0; i < nNode; i++) {
        RMS[0] += (Res1_Conv[i] + Res1_Diss[i])*(Res1_Conv[i] + Res1_Diss[i]);
        RMS[1] += (Res2_Conv[i] + Res2_Diss[i])*(Res2_Conv[i] + Res2_Diss[i]);
        RMS[2] += (Res3_Conv[i] + Res3_Diss[i])*(Res3_Conv[i] + Res3_Diss[i]);
        RMS[3] += (Res4_Conv[i] + Res4_Diss[i])*(Res4_Conv[i] + Res4_Diss[i]);
        RMS[4] += (Res5_Conv[i] + Res5_Diss[i])*(Res5_Conv[i] + Res5_Diss[i]);
    }
    RMS_Res = RMS[0] + RMS[1] + RMS[2] + RMS[3] + RMS[4];
    RMS_Res = sqrt(RMS_Res/(5.0 * (double)nNode));
    for (int i = 0; i < NEQUATIONS; i++)
        RMS[i] = sqrt(RMS[i]/(double)nNode);
    
    // Normalize the RMS
    if (SaveRMS < 5) {
        for (int i = 0; i < NEQUATIONS; i++) {
            scale_RMS[i]  += RMS[i];
            scale_RMS_Res += RMS[i];
        }
        scale_RMS_Res /= (2.0*NEQUATIONS);
        SaveRMS++;
    }
    
    if (SaveRMS < 5) {
        for (int i = 0; i < NEQUATIONS; i++)
            RMS_S[i] = 1.0;
        RMS_Res_S = 1.0;
    } else {
        for (int i = 0; i < NEQUATIONS; i++)
            RMS_S[i] = RMS[i]/scale_RMS[i];
        RMS_Res_S = RMS_Res/scale_RMS_Res;
    }
    
    if (PrecondMethod != PRECOND_METHOD_NONE) {
        fprintf(RMS_FP, "%5d %10.5e %10.5e %10.5e %10.5e %10.5e %10.5e %10.5e %10.5e %10.5e %10.5e %10.5e %10.5e %10.5e %10.5e %10.5e %10.5e %10.5e %10.5e %10.5e %10.5e %10.5e %10.5e\n",
                Iteration, RMS_S[0], RMS_S[1], RMS_S[2], RMS_S[3], RMS_S[4], RMS_Res_S, RMS[0], RMS[1], RMS[2], RMS[3], RMS[4], RMS_Res, MinDeltaT, MaxDeltaT,
                MinEigenLamda1, MaxEigenLamda1, MinEigenLamda4, MaxEigenLamda4, MinEigenLamda5, MaxEigenLamda5, MinPrecondSigma, MaxPrecondSigma);
    } else {
        fprintf(RMS_FP, "%5d %10.5e %10.5e %10.5e %10.5e %10.5e %10.5e %10.5e %10.5e %10.5e %10.5e %10.5e %10.5e %10.5e %10.5e %10.5e %10.5e %10.5e %10.5e %10.5e %10.5e\n",
                Iteration, RMS_S[0], RMS_S[1], RMS_S[2], RMS_S[3], RMS_S[4], RMS_Res_S, RMS[0], RMS[1], RMS[2], RMS[3], RMS[4], RMS_Res, MinDeltaT, MaxDeltaT,
                MinEigenLamda1, MaxEigenLamda1, MinEigenLamda4, MaxEigenLamda4, MinEigenLamda5, MaxEigenLamda5);
    }
    fflush(RMS_FP);
    
    return RMS_Res;
}

