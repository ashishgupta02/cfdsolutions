/*******************************************************************************
 * File:        Point2D.cpp
 * Author:      Ashish Gupta
 * Revision:    1
 ******************************************************************************/

#include <stdio.h>

#include "Point2D.h"

// *****************************************************************************
// *****************************************************************************
Point2D::Point2D(double x, double y) {
    pos[0] = x;
    pos[1] = y;
}

// *****************************************************************************
// *****************************************************************************
Point2D::~Point2D() {

}

// *****************************************************************************
// *****************************************************************************
Point2D Point2D::operator +(const Point2D &p) {
    return Point2D(pos[0] + p.pos[0], pos[1] + p.pos[1]);
}

// *****************************************************************************
// *****************************************************************************
Point2D Point2D::operator -(const Point2D &p) {
    return Point2D(pos[0] - p.pos[0], pos[1] - p.pos[1]);
}

// *****************************************************************************
// *****************************************************************************
Point2D& Point2D::operator +=(const Point2D &p) {
    pos[0] += p.pos[0];
    pos[1] += p.pos[1];
    return *this;
}

// *****************************************************************************
// *****************************************************************************
Point2D& Point2D::operator -=(const Point2D &p) {
    pos[0] -= p.pos[0];
    pos[1] -= p.pos[1];
    return *this;
}

// *****************************************************************************
// *****************************************************************************
Point2D& Point2D::operator =(const Point2D &p) {
    pos[0] = p.pos[0];
    pos[1] = p.pos[1];
    return *this;
}

// *****************************************************************************
// *****************************************************************************
Point2D& Point2D::operator +=(const double &s) {
    pos[0] += s;
    pos[1] += s;
    return *this;
}

// *****************************************************************************
// *****************************************************************************
Point2D& Point2D::operator -=(const double &s) {
    pos[0] -= s;
    pos[1] -= s;
    return *this;
}

// *****************************************************************************
// *****************************************************************************
Point2D& Point2D::operator *=(const double &s) {
    pos[0] *= s;
    pos[1] *= s;
    return *this;
}

// *****************************************************************************
// *****************************************************************************
Point2D& Point2D::operator /=(const double &s) {
    pos[0] /= s;
    pos[1] /= s;
    return *this;
}

// *****************************************************************************
// *****************************************************************************
Point2D& Point2D::operator =(const double &s) {
    pos[0] = s;
    pos[1] = s;
    return *this;
}

// *****************************************************************************
// *****************************************************************************
Point2D Point2D::operator +(const double &s) {
    return Point2D(pos[0] + s, pos[1] + s);
}

// *****************************************************************************
// *****************************************************************************
Point2D Point2D::operator -(const double &s) {
    return Point2D(pos[0] - s, pos[1] - s);
}

// *****************************************************************************
// *****************************************************************************
Point2D Point2D::operator *(const double &s) {
    return Point2D(pos[0] * s, pos[1] * s);
}

// *****************************************************************************
// *****************************************************************************
Point2D Point2D::operator /(const double &s) {
    return Point2D(pos[0] / s, pos[1] / s);
}

// *****************************************************************************
// *****************************************************************************
bool Point2D::operator ==(const Point2D &p) {
    return (pos[0] == p.pos[0] && pos[1] == p.pos[1]);
}

// *****************************************************************************
// *****************************************************************************
bool Point2D::operator !=(const Point2D &p) {
    return (pos[0] != p.pos[0] || pos[1] != p.pos[1]);
}

// *****************************************************************************
// *****************************************************************************
double Point2D::operator () (int i) const {
    return pos[i];
}

// *****************************************************************************
// *****************************************************************************
double & Point2D::operator () (int i) {
    return pos[i];
}

// *****************************************************************************
// *****************************************************************************
double & Point2D::operator [] (int i) {
    return pos[i];
}

// *****************************************************************************
// *****************************************************************************
void Point2D::print() {
    printf("Point2D (x,y)= (%g, %g)\n", pos[0], pos[1]);
}

// *****************************************************************************
// *****************************************************************************
Point2D operator +(const double &s, const Point2D &p) {
    return Point2D(s + p.pos[0], s + p.pos[1]);
}

// *****************************************************************************
// *****************************************************************************
Point2D operator -(const double &s, const Point2D &p) {
    return Point2D(s - p.pos[0], s - p.pos[1]);
}

// *****************************************************************************
// *****************************************************************************
Point2D operator *(const double &s, const Point2D &p) {
    return Point2D(s * p.pos[0], s * p.pos[1]);
}

