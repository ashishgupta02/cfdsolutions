/*******************************************************************************
 * File:        Vector2D.cpp
 * Author:      Ashish Gupta
 * Revision:    4
 ******************************************************************************/

#include <stdio.h>
#include <math.h>

#include "Vector2D.h"

// *****************************************************************************
// *****************************************************************************
Vector2D::Vector2D(double dx, double dy) {
    vec[0] = dx;
    vec[1] = dy;
}

// *****************************************************************************
// *****************************************************************************
Vector2D::Vector2D(const Point2D &from, const Point2D &to) {
    vec[0] = to.pos[0] - from.pos[0];
    vec[1] = to.pos[1] - from.pos[1];
}

// *****************************************************************************
// *****************************************************************************
Vector2D::~Vector2D() {

}

// *****************************************************************************
// *****************************************************************************
double &Vector2D::operator () (int i) {
    return vec[i];
}

// *****************************************************************************
// *****************************************************************************
double Vector2D::operator () (int i) const {
    return vec[i];
}

// *****************************************************************************
// *****************************************************************************
double &Vector2D::operator [] (int i) {
    return vec[i];
}

// *****************************************************************************
// *****************************************************************************
double Vector2D::operator %(const Vector2D &v) {
    return (vec[0] * v.vec[1] - vec[1] * v.vec[0]);
}

// *****************************************************************************
// *****************************************************************************
double Vector2D::operator *(const Vector2D &v) {
    return double(vec[0] * v.vec[0] + vec[1] * v.vec[1]);
}

// *****************************************************************************
// *****************************************************************************
Vector2D Vector2D::operator +(const Vector2D &v) {
    return Vector2D(vec[0] + v.vec[0], vec[1] + v.vec[1]);
}

// *****************************************************************************
// *****************************************************************************
Vector2D Vector2D::operator -(const Vector2D &v) {
    return Vector2D(vec[0] - v.vec[0], vec[1] - v.vec[1]);
}

// *****************************************************************************
// *****************************************************************************
Vector2D Vector2D::operator *(const double &s) {
    return Vector2D(s * vec[0], s * vec[1]);
}

// *****************************************************************************
// *****************************************************************************
Vector2D Vector2D::operator /(const double &s) {
    return Vector2D(vec[0] / s, vec[1] / s);
}

// *****************************************************************************
// *****************************************************************************
double Vector2D::magnitude() {
    return double(sqrt(vec[0] * vec[0] + vec[1] * vec[1]));
}

// *****************************************************************************
// *****************************************************************************
Vector2D &Vector2D::operator +=(const Vector2D &v) {
    vec[0] += v.vec[0];
    vec[1] += v.vec[1];
    return *this;
}

// *****************************************************************************
// *****************************************************************************
Vector2D &Vector2D::operator -=(const Vector2D &v) {
    vec[0] -= v.vec[0];
    vec[1] -= v.vec[1];
    return *this;
}

// *****************************************************************************
// *****************************************************************************
Vector2D &Vector2D::operator +=(const double &s) {
    vec[0] += s;
    vec[1] += s;
    return *this;
}

// *****************************************************************************
// *****************************************************************************
Vector2D &Vector2D::operator -=(const double &s) {
    vec[0] -= s;
    vec[1] -= s;
    return *this;
}

// *****************************************************************************
// *****************************************************************************
Vector2D &Vector2D::operator *=(const double &s) {
    vec[0] *= s;
    vec[1] *= s;
    return *this;
}

// *****************************************************************************
// *****************************************************************************
Vector2D &Vector2D::operator /=(const double &s) {
    vec[0] /= s;
    vec[1] /= s;
    return *this;
}

// *****************************************************************************
// *****************************************************************************
void Vector2D::normalize() {
    double mag = sqrt(vec[0] * vec[0] + vec[1] * vec[1]);
    if (mag > 1.0e-20) {
        vec[0] = vec[0] / mag;
        vec[1] = vec[1] / mag;
    }
}

// *****************************************************************************
// *****************************************************************************
void Vector2D::print() {
    printf("\nVector2D (x,y)= (%g,%g)", vec[0], vec[1]);
}

